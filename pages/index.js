import Head from "next/head";
import {
  Box,
  Button,
  Input,
  Text,
  ChakraProvider,
  Center,
  Image,
  Flex,
  useToast,
  Heading,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
} from "@chakra-ui/react";
import { useState, useEffect, useRef } from "react";
import { useRouter } from "next/router";
import { supabase } from "../utils/supabaseClient";
import LoggedUser from "../components/LoggedUser";
import Auth from "../components/Auth";
import { format } from "date-fns";

export default function Home() {
  const [searchQuery, setSearchQuery] = useState("");
  const [searchData, setSearchData] = useState(null);
  const [searchDataAlbuns, setSearchDataAlbuns] = useState(null);
  const [searchError, setSearchError] = useState("");
  const [searchReciveToken, setSearchReciveToken] = useState("");
  const [artistIdRecive, setArtistIdRecive] = useState("");
  const [colorSelect, setColorSelect] = useState(false);
  const [selectedCardId, setSelectedCardId] = useState(null);
  const [session, setSession] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [Email_user, setEmail_user] = useState(null);
  const [loginStartTime, setLoginStartTime] = useState(null);
  const [message, setMessage] = useState(false);

  const toast = useToast();
  const router = useRouter();
  const accessToken = router.query.accessToken;
  const down = useRef(null);

  useEffect(() => {
    if (accessToken) {
     setSearchReciveToken(accessToken);
      setLoginStartTime(new Date());
    }
  }, [accessToken]);

  const handleSpotifyLogin = () => {
    const clientId = process.env.NEXT_PUBLIC_CLIENTID;
    const redirectUri = "http://localhost:3000/callback";
    const scope =
      "playlist-modify-public playlist-modify-private playlist-read-private";
    const authorizationUrl = `https://accounts.spotify.com/authorize?response_type=code&client_id=${clientId}&redirect_uri=${encodeURIComponent(
      redirectUri
    )}&scope=${encodeURIComponent(scope)}`;
    console.log("URL de Autorização:", authorizationUrl);
    window.location.href = authorizationUrl;
  };

  const handleSearch = async () => {
    const accessToken = searchReciveToken;
    if (
      loginStartTime &&
      Date.now() - loginStartTime.getTime() > 59 * 60 * 1000
    ) {
      handleSpotifyLogin();
      setMessage(true);
    } else {
      const apiUrl = "https://api.spotify.com/v1/search";

      const queryParams = new URLSearchParams({
        q: searchQuery,
        type: "album",
        market: "BR",
      });

      const requestOptions = {
        method: "GET",
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      };
      const finalUrl = `${apiUrl}?${queryParams.toString()}`;
      try {
        const response = await fetch(finalUrl, requestOptions);
        const data = await response.json();
        console.log("Dados da resposta:", data);
        setSearchData(data);
      } catch (error) {
        console.error("Erro na requisição:", error);
        setSearchError("Erro ao realizar a pesquisa.");
      }
    }
  };

  useEffect(() => {
    if (artistIdRecive) {
      handleSearchById();
    }
  }, [artistIdRecive, searchReciveToken]);

  const handleImageClick = (artistId) => {
    setArtistIdRecive(artistId);
    setSelectedCardId(artistId);
  };

  const handleSearchById = async () => {
    const albumId = artistIdRecive;

    const accessToken = searchReciveToken;
    const apiUrl = `https://api.spotify.com/v1/albums/${albumId}/tracks`;
    const requestOptions = {
      method: "GET",
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    };

    try {
      const response = await fetch(apiUrl, requestOptions);
      const data = await response.json();
      console.log("Dados da resposta:", data);
      setSearchDataAlbuns(data);
    } catch (error) {
      console.error("Erro na requisição:", error);
      setSearchError("Erro ao realizar a pesquisa.");
    }
  };

  const handleCardColor = () => {
    setColorSelect(true);
  };

  //session verify

  useEffect(() => {
    let mounted = true;
    async function getInitialSession() {
      const {
        data: { session },
      } = await supabase.auth.getSession();
      if (mounted) {
        if (session) {
          setSession(session);
        }
        setIsLoading(false);
      }
    }
    getInitialSession();
    const { subscription } = supabase.auth.onAuthStateChange(
      (_event, session) => {
        setSession(session);
      }
    );
    return () => {
      mounted = false;
      subscription?.unsubscribe();
    };
  }, []);

  const handleNotSession = () => {
    if (!session) {
      setLoginStartTime(null);
    }
  };

  return (
    <>
      <Head>
        <title>Alegria</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Center>
        <LoggedUser />
      </Center>

      {message === true ? (
        <Center>
          <Heading>
            A senha Expirou - Quando voltar Digite o termo novamente
          </Heading>
        </Center>
      ) : null}

      {session ? (
        <ChakraProvider>
          <Center>
            <Box as="main">
              <Box className="description" />
              <Center>
                <Image src="/alegria.jpeg" />
              </Center>
              <Center>
                <p>
                  Data de login:{" "}
                  {loginStartTime &&
                    format(loginStartTime, "HH:mm:ss dd/MM/yyyy")}
                </p>
              </Center>

              <Box className="grid">
                <Center>
                  <Button onClick={handleSpotifyLogin} className="card">
                    Entrar na Alegria
                  </Button>
                </Center>
                <br />
                <Box className="searchForm">
                  <Center>
                    <Input
                      type="text"
                      placeholder="Digite sua pesquisa"
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      mx="auto" // Adiciona margem à esquerda e à direita automaticamente
                      width="600px" // Define uma largura fixa para o Input (ajuste conforme necessário)
                    />
                  </Center>

                  <Center>
                    <Button onClick={handleSearch}>Pesquisar</Button>
                  </Center>
                  <br />

                  {searchData &&
                    searchData.albums &&
                    searchData.albums.items && (
                      <Flex flexWrap="wrap" justifyContent="space-around">
                        {searchData.albums.items.map((album) => (
                          <Box
                            key={album.id}
                            m={4}
                            width="300px"
                            borderWidth="1px"
                            borderRadius="lg"
                            overflow="hidden"
                            bg={selectedCardId === album.id ? "green" : "white"} // Adicionado aqui
                          >
                            <Image
                              src={album.images[0].url}
                              alt={album.name}
                              onClick={() => handleImageClick(album.id)}
                              cursor="pointer"
                            />

                            <Box p="6">
                              <Text fontWeight="bold" fontSize="20px" mb="2">
                                {album.name}
                              </Text>
                              <Text color="gray.500">
                                {album.artists[0].name}
                              </Text>
                            </Box>
                          </Box>
                        ))}
                      </Flex>
                    )}

                  {searchError && <Text color="red.500">{searchError}</Text>}
                  {searchDataAlbuns && (
                    <Center>
                      <Heading ref={down}> Músicas</Heading>
                    </Center>
                  )}

                  {searchDataAlbuns &&
                    searchDataAlbuns.items &&
                    searchDataAlbuns.items.length > 0 && (
                      <Flex flexWrap="wrap" justifyContent="space-around">
                        {searchDataAlbuns.items.map((track) => (
                          <Box key={track.id} m={4}>
                            <iframe
                              src={`https://open.spotify.com/embed/track/${track.id}`}
                              width="300"
                              height="380"
                              allowtransparency="true"
                              allow="encrypted-media"
                            ></iframe>
                            <Box maxWidth="300px">
                              <p>{track.name}</p>
                            </Box>
                          </Box>
                        ))}
                      </Flex>
                    )}
                </Box>
              </Box>
            </Box>
          </Center>
        </ChakraProvider>
      ) : (
        <Auth />
      )}
    </>
  );
}
